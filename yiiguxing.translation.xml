<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="586" />
    <option name="newTranslationDialogX" value="266" />
    <option name="newTranslationDialogY" value="367" />
    <histories>
      <item value="ARTIFICIAL QA LOAN" />
      <item value="ARTIFICIAL" />
      <item value="参数" />
      <item value="extracted" />
      <item value="赋值&#10;" />
      <item value="queryReq.setEmailLikeType(LikeQueryEnum.getLikeType(queryReq.getEmail())); queryReq.setMobileLikeType(LikeQueryEnum.getLikeType(queryReq.getMobile())); queryReq.setIdNoLikeType(LikeQueryEnum.getLikeType(queryReq.getIdNo())); queryReq.setCustomerNameLikeType(LikeQueryEnum.getLikeType(queryReq.getCustomerName())); 去除 mobile、email、idNo 首尾 queryReq.setEmail(MaskUtils.deletePreAndSufStr(queryReq.getEmail())); queryReq.setMobile(MaskUtils.deletePreAndSufStr(queryReq.getMobile())); queryReq.setIdNo(MaskUtils.deletePreAndSufStr(queryReq.getIdNo())); queryReq.setCustomerName(MaskUtils.deletePreAndSufStr(queryReq.getCustomerName()));" />
      <item value="Asset" />
      <item value="transaction Level" />
      <item value="start Assess Risk" />
      <item value="Assess" />
      <item value="业务" />
      <item value="y" />
      <item value="issue Country" />
      <item value="CITIZENSHIP" />
      <item value="nationality" />
      <item value="Helper" />
      <item value="org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'approveController': Unsatisfied dependency expressed through field 'approveRabbitMQService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'approveRabbitMQService': Unsatisfied dependency expressed through field 'customerRiskService'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name 'customerRiskServiceImpl': Bean with name 'customerRiskServiceImpl' has been injected into other beans" />
      <item value="reject Reason" />
      <item value="reject Category" />
      <item value="risk Level" />
      <item value="risk Init Score" />
      <item value="risk Result" />
      <item value="submission Time" />
      <item value="case Content" />
      <item value="chinese Code Info" />
      <item value="da Result Score" />
      <item value="confirmed Customer Info" />
      <item value="QA" />
      <item value="直通" />
      <item value="orig Customer Info" />
      <item value="ocr Customer Info" />
      <item value="confirmed Risk Level" />
      <item value="risk Confirmed Score" />
      <item value="Business Process Result" />
      <item value="Plain" />
      <item value="Target host is not specified" />
      <item value="销户&#10;" />
      <item value="Lombok requires enabled annotation processing: Do you want to enable annotation processors?" />
      <item value="Decode a given Json Web Token." />
      <item value="Decode a given Json Web Token. Note that this method doesn't verify the token's signature! Use it only if you trust the token or you already verified it. 形参: token – with jwt format as string. 返回值: a decoded JWT. 抛出: JWTDecodeException – if any part of the token contained an invalid jwt or JSON format of each of the jwt parts." />
      <item value="Create an instance of HttpUpgradeHandler for an given class and uses it for the http protocol upgrade processing." />
      <item value="Callback after completion of request processing, that is, after rendering the view. Will be called on any outcome of handler execution, thus allows for proper resource cleanup. Note: Will only be called if this interceptor's preHandle method has successfully completed and returned true! As with the postHandle method, the method will be invoked on each interceptor in the chain in reverse order, so the first interceptor will be the last to be invoked. Note: special considerations apply for asynchronous request processing. For more details see AsyncHandlerInterceptor. 形参: request – current HTTP request response – current HTTP response handler – handler (or HandlerMethod) that started asynchronous execution, for type andor instance examination ex – exception thrown on handler execution, if any 抛出: Exception – in case of errors" />
      <item value="ext" />
      <item value="原来" />
      <item value="build" />
      <item value="构建" />
      <item value="ops operation" />
      <item value="业务&#10;" />
      <item value="person" />
      <item value="Do you want to enable annotation processors" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="145" />
        <entry key="ENGLISH" value="148" />
        <entry key="CORSICAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1647830710005" />
  </component>
  <component name="Settings">
    <option name="translateDocumentation" value="true" />
  </component>
</application>